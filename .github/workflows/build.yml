name: Build Go Project

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

permissions: write-all

jobs:
    build:
        runs-on: ${{ matrix.os }}

        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]
                go-version: [1.23]

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ matrix.go-version }}

            - name: Build for ${{ matrix.os }}
              run: |
                  cd src # Change to the src directory
                  OUTPUT_DIR="${{ github.workspace }}/bin/${{ matrix.os }}" # Save the binaries outside of src
                  BINARY_NAME="flag"
                  mkdir -p $OUTPUT_DIR

                  if [ "${{ matrix.os }}" = "windows-latest" ]; then
                      GOOS=windows GOARCH=amd64 go build -o $OUTPUT_DIR/$BINARY_NAME.exe
                      zip -j $OUTPUT_DIR/$BINARY_NAME.zip $OUTPUT_DIR/$BINARY_NAME.exe
                  elif [ "${{ matrix.os }}" = "macos-latest" ]; then
                      GOOS=darwin GOARCH=amd64 go build -o $OUTPUT_DIR/$BINARY_NAME
                      zip -j $OUTPUT_DIR/$BINARY_NAME.zip $OUTPUT_DIR/$BINARY_NAME
                  else
                      GOOS=linux GOARCH=amd64 go build -o $OUTPUT_DIR/$BINARY_NAME
                      zip -j $OUTPUT_DIR/$BINARY_NAME.zip $OUTPUT_DIR/$BINARY_NAME
                  fi

            - name: List contents of bin directory
              run: |
                  pwd
                  ls -la ${{ github.workspace }}/bin/${{ matrix.os }}
              if: runner.os != 'Windows'

            - name: List contents of bin directory (Windows)
              if: runner.os == 'Windows'
              shell: pwsh
              run: |
                  pwd
                  Get-ChildItem -Path ${{ github.workspace }}/bin/${{ matrix.os }}

            - name: Upload build artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: build
                  path: ${{ github.workspace }}/bin/${{ matrix.os }}

            - name: Set Release Version
              id: set_version
              run: echo "RELEASE_VERSION=$(date +'%Y%m%d.%H%M%S')" >> $GITHUB_ENV

            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              with:
                  tag_name: ${{ env.RELEASE_VERSION }}
                  release_name: Release ${{ env.RELEASE_VERSION }}
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Upload Release Assets
              uses: actions/upload-release-asset@v1
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ${{ github.workspace }}/bin/${{ matrix.os }}/flag.zip
                  asset_name: flag.zip
                  asset_content_type: application/zip
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
