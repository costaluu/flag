name: Build Go Project

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

permissions: write-all

jobs:
    build:
        runs-on: ${{ matrix.os }}

        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]
                go-version: [1.23]

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version: ${{ matrix.go-version }}

            - name: Build for ${{ matrix.os }}
              run: |
                  cd src # Change to the src directory
                  OUTPUT_DIR="../bin/${{ matrix.os }}" # Save the binaries outside of src
                  BINARY_NAME="flag"
                  mkdir -p $OUTPUT_DIR
                  if [ "${{ matrix.os }}" = "windows-latest" ]; then
                      GOOS=windows GOARCH=amd64 go build -o $OUTPUT_DIR/$BINARY_NAME.exe
                  elif [ "${{ matrix.os }}" = "macos-latest" ]; then
                      GOOS=darwin GOARCH=amd64 go build -o $OUTPUT_DIR/$BINARY_NAME
                  else
                      GOOS=linux GOARCH=amd64 go build -o $OUTPUT_DIR/$BINARY_NAME
                  fi

                  # Create ZIP file of the build artifacts
                  zip -r $OUTPUT_DIR/$BINARY_NAME.zip $OUTPUT_DIR/
              shell: bash
              if: runner.os != 'Windows'

            - name: Build for Windows
              if: runner.os == 'Windows'
              shell: pwsh
              run: |
                  cd src # Change to the src directory
                  $OUTPUT_DIR = "../bin/${{ matrix.os }}" # Save the binaries outside of src
                  $BINARY_NAME = "flag"
                  mkdir -p $OUTPUT_DIR
                  if ($env:GITHUB_RUNNER_OS -eq "Windows") {
                      $env:GOOS = "windows"
                      $env:GOARCH = "amd64"
                      go build -o "$OUTPUT_DIR\$BINARY_NAME.exe"
                      Compress-Archive -Path "$OUTPUT_DIR\$BINARY_NAME.exe" -DestinationPath "$OUTPUT_DIR\$BINARY_NAME.zip"
                  } elseif ($env:GITHUB_RUNNER_OS -eq "macOS") {
                      $env:GOOS = "darwin"
                      $env:GOARCH = "amd64"
                      go build -o "$OUTPUT_DIR/$BINARY_NAME"
                      Compress-Archive -Path "$OUTPUT_DIR/$BINARY_NAME" -DestinationPath "$OUTPUT_DIR/$BINARY_NAME.zip"
                  } else {
                      $env:GOOS = "linux"
                      $env:GOARCH = "amd64"
                      go build -o "$OUTPUT_DIR/$BINARY_NAME"
                      Compress-Archive -Path "$OUTPUT_DIR/$BINARY_NAME" -DestinationPath "$OUTPUT_DIR/$BINARY_NAME.zip"
                  }

            - name: List contents of bin directory
              run: ls -la bin/
              if: runner.os != 'Windows'

            - name: List contents of bin directory (Windows)
              if: runner.os == 'Windows'
              shell: pwsh
              run: Get-ChildItem -Path bin/

            - name: Upload build artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: build
                  path: bin/

            - name: Set Release Version
              id: set_version
              run: echo "RELEASE_VERSION=$(date +'%Y%m%d.%H%M%S')" >> $GITHUB_ENV

            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              with:
                  tag_name: ${{ env.RELEASE_VERSION }}
                  release_name: Release ${{ env.RELEASE_VERSION }}
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Upload Release Assets
              uses: actions/upload-release-asset@v1
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: bin/flag.zip # Path to the ZIP file
                  asset_name: flag.zip # Name of the asset
                  asset_content_type: application/zip
